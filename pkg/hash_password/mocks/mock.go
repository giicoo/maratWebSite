// Code generated by MockGen. DO NOT EDIT.
// Source: hashing.go

// Package mock_hashFunc is a generated GoMock package.
package mock_hashFunc

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHashTools is a mock of HashTools interface.
type MockHashTools struct {
	ctrl     *gomock.Controller
	recorder *MockHashToolsMockRecorder
}

// MockHashToolsMockRecorder is the mock recorder for MockHashTools.
type MockHashToolsMockRecorder struct {
	mock *MockHashTools
}

// NewMockHashTools creates a new mock instance.
func NewMockHashTools(ctrl *gomock.Controller) *MockHashTools {
	mock := &MockHashTools{ctrl: ctrl}
	mock.recorder = &MockHashToolsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHashTools) EXPECT() *MockHashToolsMockRecorder {
	return m.recorder
}

// CheckPasswordHash mocks base method.
func (m *MockHashTools) CheckPasswordHash(password, hash string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPasswordHash", password, hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckPasswordHash indicates an expected call of CheckPasswordHash.
func (mr *MockHashToolsMockRecorder) CheckPasswordHash(password, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPasswordHash", reflect.TypeOf((*MockHashTools)(nil).CheckPasswordHash), password, hash)
}

// HashPassword mocks base method.
func (m *MockHashTools) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockHashToolsMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockHashTools)(nil).HashPassword), password)
}
